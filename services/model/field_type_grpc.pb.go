// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/model/field_type.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FieldTypeServiceClient is the client API for FieldTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldTypeServiceClient interface {
	ListPagination(ctx context.Context, in *ListPaginationFieldTypeRequest, opts ...grpc.CallOption) (*ListPaginationFieldTypeResponse, error)
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*FieldTypeView, error)
	GetByIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListFieldTypeResponse, error)
	Create(ctx context.Context, in *FieldType, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *FieldType, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fieldTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldTypeServiceClient(cc grpc.ClientConnInterface) FieldTypeServiceClient {
	return &fieldTypeServiceClient{cc}
}

func (c *fieldTypeServiceClient) ListPagination(ctx context.Context, in *ListPaginationFieldTypeRequest, opts ...grpc.CallOption) (*ListPaginationFieldTypeResponse, error) {
	out := new(ListPaginationFieldTypeResponse)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/ListPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldTypeServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*FieldTypeView, error) {
	out := new(FieldTypeView)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldTypeServiceClient) GetByIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListFieldTypeResponse, error) {
	out := new(ListFieldTypeResponse)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/GetByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldTypeServiceClient) Create(ctx context.Context, in *FieldType, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldTypeServiceClient) Update(ctx context.Context, in *FieldType, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldTypeServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.FieldTypeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldTypeServiceServer is the server API for FieldTypeService service.
// All implementations must embed UnimplementedFieldTypeServiceServer
// for forward compatibility
type FieldTypeServiceServer interface {
	ListPagination(context.Context, *ListPaginationFieldTypeRequest) (*ListPaginationFieldTypeResponse, error)
	GetById(context.Context, *IdRequest) (*FieldTypeView, error)
	GetByIds(context.Context, *ListRequest) (*ListFieldTypeResponse, error)
	Create(context.Context, *FieldType) (*emptypb.Empty, error)
	Update(context.Context, *FieldType) (*emptypb.Empty, error)
	Delete(context.Context, *IdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFieldTypeServiceServer()
}

// UnimplementedFieldTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFieldTypeServiceServer struct {
}

func (UnimplementedFieldTypeServiceServer) ListPagination(context.Context, *ListPaginationFieldTypeRequest) (*ListPaginationFieldTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPagination not implemented")
}
func (UnimplementedFieldTypeServiceServer) GetById(context.Context, *IdRequest) (*FieldTypeView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedFieldTypeServiceServer) GetByIds(context.Context, *ListRequest) (*ListFieldTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIds not implemented")
}
func (UnimplementedFieldTypeServiceServer) Create(context.Context, *FieldType) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFieldTypeServiceServer) Update(context.Context, *FieldType) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFieldTypeServiceServer) Delete(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFieldTypeServiceServer) mustEmbedUnimplementedFieldTypeServiceServer() {}

// UnsafeFieldTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldTypeServiceServer will
// result in compilation errors.
type UnsafeFieldTypeServiceServer interface {
	mustEmbedUnimplementedFieldTypeServiceServer()
}

func RegisterFieldTypeServiceServer(s grpc.ServiceRegistrar, srv FieldTypeServiceServer) {
	s.RegisterService(&FieldTypeService_ServiceDesc, srv)
}

func _FieldTypeService_ListPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaginationFieldTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).ListPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/ListPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).ListPagination(ctx, req.(*ListPaginationFieldTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldTypeService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldTypeService_GetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).GetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/GetByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).GetByIds(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).Create(ctx, req.(*FieldType))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).Update(ctx, req.(*FieldType))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.FieldTypeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldTypeServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldTypeService_ServiceDesc is the grpc.ServiceDesc for FieldTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.FieldTypeService",
	HandlerType: (*FieldTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPagination",
			Handler:    _FieldTypeService_ListPagination_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _FieldTypeService_GetById_Handler,
		},
		{
			MethodName: "GetByIds",
			Handler:    _FieldTypeService_GetByIds_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FieldTypeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FieldTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FieldTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/model/field_type.proto",
}
