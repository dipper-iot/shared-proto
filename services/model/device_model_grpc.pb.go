// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/model/device_model.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceModelServiceClient is the client API for DeviceModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceModelServiceClient interface {
	ListPagination(ctx context.Context, in *ListPaginationDeviceModelRequest, opts ...grpc.CallOption) (*ListPaginationDeviceModelResponse, error)
	CountModelByDeviceId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IntResponse, error)
	ListModelByDeviceId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ListDeviceModelResponse, error)
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeviceModelDetailView, error)
	GetByIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDeviceModelResponse, error)
	UpdateField(ctx context.Context, in *DeviceModelField, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteField(ctx context.Context, in *DeleteDeviceModelField, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAssignDevice(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//  rpc UpdatedAssignDevice(AssignRequest) returns (google.protobuf.Empty) {}
	DeleteAssignDevice(ctx context.Context, in *DeleteAssignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceModelServiceClient(cc grpc.ClientConnInterface) DeviceModelServiceClient {
	return &deviceModelServiceClient{cc}
}

func (c *deviceModelServiceClient) ListPagination(ctx context.Context, in *ListPaginationDeviceModelRequest, opts ...grpc.CallOption) (*ListPaginationDeviceModelResponse, error) {
	out := new(ListPaginationDeviceModelResponse)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/ListPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) CountModelByDeviceId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/CountModelByDeviceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) ListModelByDeviceId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ListDeviceModelResponse, error) {
	out := new(ListDeviceModelResponse)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/ListModelByDeviceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DeviceModelDetailView, error) {
	out := new(DeviceModelDetailView)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) GetByIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDeviceModelResponse, error) {
	out := new(ListDeviceModelResponse)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/GetByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) UpdateField(ctx context.Context, in *DeviceModelField, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/UpdateField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) DeleteField(ctx context.Context, in *DeleteDeviceModelField, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/DeleteField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) CreateAssignDevice(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/CreateAssignDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceModelServiceClient) DeleteAssignDevice(ctx context.Context, in *DeleteAssignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.DeviceModelService/DeleteAssignDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceModelServiceServer is the server API for DeviceModelService service.
// All implementations must embed UnimplementedDeviceModelServiceServer
// for forward compatibility
type DeviceModelServiceServer interface {
	ListPagination(context.Context, *ListPaginationDeviceModelRequest) (*ListPaginationDeviceModelResponse, error)
	CountModelByDeviceId(context.Context, *IdRequest) (*IntResponse, error)
	ListModelByDeviceId(context.Context, *IdRequest) (*ListDeviceModelResponse, error)
	GetById(context.Context, *IdRequest) (*DeviceModelDetailView, error)
	GetByIds(context.Context, *ListRequest) (*ListDeviceModelResponse, error)
	UpdateField(context.Context, *DeviceModelField) (*emptypb.Empty, error)
	DeleteField(context.Context, *DeleteDeviceModelField) (*emptypb.Empty, error)
	CreateAssignDevice(context.Context, *AssignRequest) (*emptypb.Empty, error)
	//  rpc UpdatedAssignDevice(AssignRequest) returns (google.protobuf.Empty) {}
	DeleteAssignDevice(context.Context, *DeleteAssignRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceModelServiceServer()
}

// UnimplementedDeviceModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceModelServiceServer struct {
}

func (UnimplementedDeviceModelServiceServer) ListPagination(context.Context, *ListPaginationDeviceModelRequest) (*ListPaginationDeviceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPagination not implemented")
}
func (UnimplementedDeviceModelServiceServer) CountModelByDeviceId(context.Context, *IdRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountModelByDeviceId not implemented")
}
func (UnimplementedDeviceModelServiceServer) ListModelByDeviceId(context.Context, *IdRequest) (*ListDeviceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelByDeviceId not implemented")
}
func (UnimplementedDeviceModelServiceServer) GetById(context.Context, *IdRequest) (*DeviceModelDetailView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedDeviceModelServiceServer) GetByIds(context.Context, *ListRequest) (*ListDeviceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIds not implemented")
}
func (UnimplementedDeviceModelServiceServer) UpdateField(context.Context, *DeviceModelField) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}
func (UnimplementedDeviceModelServiceServer) DeleteField(context.Context, *DeleteDeviceModelField) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedDeviceModelServiceServer) CreateAssignDevice(context.Context, *AssignRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignDevice not implemented")
}
func (UnimplementedDeviceModelServiceServer) DeleteAssignDevice(context.Context, *DeleteAssignRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignDevice not implemented")
}
func (UnimplementedDeviceModelServiceServer) mustEmbedUnimplementedDeviceModelServiceServer() {}

// UnsafeDeviceModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceModelServiceServer will
// result in compilation errors.
type UnsafeDeviceModelServiceServer interface {
	mustEmbedUnimplementedDeviceModelServiceServer()
}

func RegisterDeviceModelServiceServer(s grpc.ServiceRegistrar, srv DeviceModelServiceServer) {
	s.RegisterService(&DeviceModelService_ServiceDesc, srv)
}

func _DeviceModelService_ListPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaginationDeviceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).ListPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/ListPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).ListPagination(ctx, req.(*ListPaginationDeviceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_CountModelByDeviceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).CountModelByDeviceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/CountModelByDeviceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).CountModelByDeviceId(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_ListModelByDeviceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).ListModelByDeviceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/ListModelByDeviceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).ListModelByDeviceId(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_GetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).GetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/GetByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).GetByIds(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceModelField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/UpdateField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).UpdateField(ctx, req.(*DeviceModelField))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceModelField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/DeleteField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).DeleteField(ctx, req.(*DeleteDeviceModelField))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_CreateAssignDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).CreateAssignDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/CreateAssignDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).CreateAssignDevice(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceModelService_DeleteAssignDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceModelServiceServer).DeleteAssignDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DeviceModelService/DeleteAssignDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceModelServiceServer).DeleteAssignDevice(ctx, req.(*DeleteAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceModelService_ServiceDesc is the grpc.ServiceDesc for DeviceModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.DeviceModelService",
	HandlerType: (*DeviceModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPagination",
			Handler:    _DeviceModelService_ListPagination_Handler,
		},
		{
			MethodName: "CountModelByDeviceId",
			Handler:    _DeviceModelService_CountModelByDeviceId_Handler,
		},
		{
			MethodName: "ListModelByDeviceId",
			Handler:    _DeviceModelService_ListModelByDeviceId_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _DeviceModelService_GetById_Handler,
		},
		{
			MethodName: "GetByIds",
			Handler:    _DeviceModelService_GetByIds_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _DeviceModelService_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _DeviceModelService_DeleteField_Handler,
		},
		{
			MethodName: "CreateAssignDevice",
			Handler:    _DeviceModelService_CreateAssignDevice_Handler,
		},
		{
			MethodName: "DeleteAssignDevice",
			Handler:    _DeviceModelService_DeleteAssignDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/model/device_model.proto",
}
