// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/device/device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	ListPagination(ctx context.Context, in *ListPaginationRequest, opts ...grpc.CallOption) (*ListPaginationResponse, error)
	CountDeviceByUserId(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IntResponse, error)
	CountDeviceByNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*IntResponse, error)
	GetDeviceId(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceView, error)
	GetDeviceDetailId(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceDetailView, error)
	GetDeviceIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetDeviceDetailIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDetailResponse, error)
	GetDeviceAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*DeviceDetailView, error)
	CheckClientId(ctx context.Context, in *ClientIdRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	CheckDeviceKey(ctx context.Context, in *DeviceKeyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetListDeviceIdWithUserId(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListDeviceId, error)
	CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) ListPagination(ctx context.Context, in *ListPaginationRequest, opts ...grpc.CallOption) (*ListPaginationResponse, error) {
	out := new(ListPaginationResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/ListPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CountDeviceByUserId(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/CountDeviceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CountDeviceByNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/CountDeviceByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceId(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceView, error) {
	out := new(DeviceView)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetDeviceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceDetailId(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceDetailView, error) {
	out := new(DeviceDetailView)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetDeviceDetailId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetDeviceIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceDetailIds(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDetailResponse, error) {
	out := new(ListDetailResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetDeviceDetailIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*DeviceDetailView, error) {
	out := new(DeviceDetailView)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetDeviceAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CheckClientId(ctx context.Context, in *ClientIdRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/CheckClientId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CheckDeviceKey(ctx context.Context, in *DeviceKeyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/CheckDeviceKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetListDeviceIdWithUserId(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListDeviceId, error) {
	out := new(ListDeviceId)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetListDeviceIdWithUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.DeviceService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.DeviceService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.DeviceService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	ListPagination(context.Context, *ListPaginationRequest) (*ListPaginationResponse, error)
	CountDeviceByUserId(context.Context, *UserRequest) (*IntResponse, error)
	CountDeviceByNamespace(context.Context, *NamespaceRequest) (*IntResponse, error)
	GetDeviceId(context.Context, *DeviceRequest) (*DeviceView, error)
	GetDeviceDetailId(context.Context, *DeviceRequest) (*DeviceDetailView, error)
	GetDeviceIds(context.Context, *ListRequest) (*ListResponse, error)
	GetDeviceDetailIds(context.Context, *ListRequest) (*ListDetailResponse, error)
	GetDeviceAuth(context.Context, *AuthRequest) (*DeviceDetailView, error)
	CheckClientId(context.Context, *ClientIdRequest) (*BoolResponse, error)
	CheckDeviceKey(context.Context, *DeviceKeyRequest) (*BoolResponse, error)
	GetListDeviceIdWithUserId(context.Context, *UserRequest) (*ListDeviceId, error)
	CreateDevice(context.Context, *Device) (*emptypb.Empty, error)
	UpdateDevice(context.Context, *Device) (*emptypb.Empty, error)
	DeleteDevice(context.Context, *DeviceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) ListPagination(context.Context, *ListPaginationRequest) (*ListPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPagination not implemented")
}
func (UnimplementedDeviceServiceServer) CountDeviceByUserId(context.Context, *UserRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDeviceByUserId not implemented")
}
func (UnimplementedDeviceServiceServer) CountDeviceByNamespace(context.Context, *NamespaceRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDeviceByNamespace not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceId(context.Context, *DeviceRequest) (*DeviceView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceId not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceDetailId(context.Context, *DeviceRequest) (*DeviceDetailView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDetailId not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceIds(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceIds not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceDetailIds(context.Context, *ListRequest) (*ListDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDetailIds not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceAuth(context.Context, *AuthRequest) (*DeviceDetailView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAuth not implemented")
}
func (UnimplementedDeviceServiceServer) CheckClientId(context.Context, *ClientIdRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClientId not implemented")
}
func (UnimplementedDeviceServiceServer) CheckDeviceKey(context.Context, *DeviceKeyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceKey not implemented")
}
func (UnimplementedDeviceServiceServer) GetListDeviceIdWithUserId(context.Context, *UserRequest) (*ListDeviceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDeviceIdWithUserId not implemented")
}
func (UnimplementedDeviceServiceServer) CreateDevice(context.Context, *Device) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDevice(context.Context, *Device) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDevice(context.Context, *DeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_ListPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/ListPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListPagination(ctx, req.(*ListPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CountDeviceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CountDeviceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/CountDeviceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CountDeviceByUserId(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CountDeviceByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CountDeviceByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/CountDeviceByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CountDeviceByNamespace(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceId(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceDetailId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceDetailId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceDetailId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceDetailId(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceIds(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceDetailIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceDetailIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceDetailIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceDetailIds(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceAuth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CheckClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CheckClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/CheckClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CheckClientId(ctx, req.(*ClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CheckDeviceKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CheckDeviceKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/CheckDeviceKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CheckDeviceKey(ctx, req.(*DeviceKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetListDeviceIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetListDeviceIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetListDeviceIdWithUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetListDeviceIdWithUserId(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPagination",
			Handler:    _DeviceService_ListPagination_Handler,
		},
		{
			MethodName: "CountDeviceByUserId",
			Handler:    _DeviceService_CountDeviceByUserId_Handler,
		},
		{
			MethodName: "CountDeviceByNamespace",
			Handler:    _DeviceService_CountDeviceByNamespace_Handler,
		},
		{
			MethodName: "GetDeviceId",
			Handler:    _DeviceService_GetDeviceId_Handler,
		},
		{
			MethodName: "GetDeviceDetailId",
			Handler:    _DeviceService_GetDeviceDetailId_Handler,
		},
		{
			MethodName: "GetDeviceIds",
			Handler:    _DeviceService_GetDeviceIds_Handler,
		},
		{
			MethodName: "GetDeviceDetailIds",
			Handler:    _DeviceService_GetDeviceDetailIds_Handler,
		},
		{
			MethodName: "GetDeviceAuth",
			Handler:    _DeviceService_GetDeviceAuth_Handler,
		},
		{
			MethodName: "CheckClientId",
			Handler:    _DeviceService_CheckClientId_Handler,
		},
		{
			MethodName: "CheckDeviceKey",
			Handler:    _DeviceService_CheckDeviceKey_Handler,
		},
		{
			MethodName: "GetListDeviceIdWithUserId",
			Handler:    _DeviceService_GetListDeviceIdWithUserId_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/device/device.proto",
}
